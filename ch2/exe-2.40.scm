(define (enumerate-interval start end)
  (if (> start end)
      '() 
      (cons  start (enumerate-interval (+ start 1) end))))

(define (unique-pairs n)
  (reduce append '()
	  (map (lambda (i)
	 (map (lambda (j) (cons j i)) (enumerate-interval 1 (- i 1))))
       (enumerate-interval 1 n))))

(define (prime? n)
  (define (recurse k n)
    (cond ((= n 1) #t)
	   ((= k n) #t)
	  ((= (remainder n k) 0) #f)
	  (else (recurse (+ k 1) n))))
  (recurse 2 n))
	   
(define (prime-sum-pairs n)
  (map (lambda (pair)
	 (list pair (+ (car pair) (cdr pair))))
       (filter (lambda (pair)
		      (prime? (+ (car pair) (cdr pair))))
	       (unique-pairs (- n 1)))))

(prime-sum-pairs 7)
