(define (=number? x y)
  (and (number? x) (= x y)))
;a.
(define (left expr)
  (car expr))
(define (right expr)
  (caddr expr))
(define (op expr)
  (cadr expr))
(define (make-sum x y)
  (cond ((=number? x 0) y)
	((=number? y 0) x)
	((and (number? y) (number? x)) (+ x y))
	(else (list x '+ y))))
(define (product? expr)
  (and (pair? expr)
       (eq? (op expr) '*)))
(define (sum? expr)
  (and (pair? expr)
       (eq? (op expr) '+)))
(define (make-product x y)
  (cond ((or (=number? x 0) (=number? y 0)) 0)
	((=number? x 1) y)
	((=number? y 1) x)
	((and (number? x) (number? y)) (* x y))
	(else (list x '* y))))

(define (deriv expr var)
  (cond ((number? expr) 0)
	((not (pair? expr))
	 (if (eq? expr var)
	     1
	     0))	      
	((sum? expr)
	 (make-sum (deriv (left expr) var)
		   (deriv (right expr) var)))
	((product? expr)
	 (make-sum (make-product
		    (deriv (left expr) var)
		    (right expr))
		   (make-product
		    (left expr)
		    (deriv (right expr) var))))))

					;b.
(define (stronger? op1 op2)
  (and (not (eq? op1 op2))
       (and (eq? op1 '*)
	    (eq? op2 '+))))

(define (weaker? op1 op2)
  (and (not (eq? op1 op2))
       (and (eq? op1 '+)
	    (eq? op2 '*))))
(define (similar? op1 op2)
  (eq? op1 op2))

(define (get-second-op expr)
  (cadddr expr))
(define (get-first-op expr)
  (cadr expr))
(define (rest-after-first-op expr)
  (cddr expr))
(define (get-first-elem expr)
  (car expr))
(define (get-second-elem expr)
  (caddr expr))

(define (expr-isone-element? expr)
  (and (pair? expr)
       (not (pair? (cdr expr)))))
      
(define (expr-is-binary? expr)
  (and (pair? expr)
       (pair? (cdr expr))
       (pair? (cddr expr))
       (not (pair? (cdddr expr)))))

(define (make-sum-or-product-from-binary expr)
  (cond ((eq? (get-first-op expr) '+)
	 (make-sum (get-first-elem expr)
		   (get-second-elem expr)))
	(else (make-product (get-first-elem expr)
			    (get-second-elem expr)))))

(define (rest-after-second-op expr)
  (cddddr expr))

	 

(define (normalize-expression expr)
  (display "\nexpr: ")
  (display expr)
  (display "\nexpr is binary? : ")
  (display (expr-is-binary? expr))
  (display "\nexpr is one element? : ")
  (display (expr-isone-element? expr))
  (newline)
  (cond
   ((expr-isone-element? expr) (car expr))
   ((expr-is-binary? expr)
    (make-sum-or-product-from-binary expr))
   ((stronger? (get-first-op expr) (get-second-op expr))
	(make-sum
	 (make-product (get-first-elem expr)
		      (get-second-elem expr))
	 (normalize-expression
	  (rest-after-second-op expr))))
   ((weaker? (get-first-op expr)
	     (get-second-op expr))
	 (make-sum
	  (get-first-elem expr)
	  (normalize-expression (rest-after-first-op expr))))
   ((similar? (get-first-op expr)
	      (get-second-op expr))
    ((eq? (get-first-op expr) '+)
     (make-sum (get-first-elem expr)
	       (normalize-expression (cdr expr))))
    ((eq? (get-first-op expr) '*)
     (make-product (get-first-elem expr)
	       (normalize-expression (cdr expr)))))))
  
