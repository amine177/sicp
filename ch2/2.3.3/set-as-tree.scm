(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (display "\nset: ")
  (display set)
  (cond   ((null? set) #f)
	  ((= x (entry set)) #t)
	  ((> x (entry set))
	   (element-of-set? x (right-branch set)))
	  ((< x (entry set))
	   (element-of-set? x (left-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
	((= x (entry set)) set)
	((> x (entry set))
	 (make-tree (entry set)
		    (adjoin-set x (right-branch set))
		    (left-branch set)))
	((< x (entry set))
	 (make-tree (entry set)
		    (right-branch set)
		    (adjoin-set x (left-branch set))))))

(element-of-set? 11 (list 3
			  (list 1)
			  (list 7
				(list 5 '() '())
				(list 9
				      '()
				      (list 11)))))
